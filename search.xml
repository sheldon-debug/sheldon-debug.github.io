<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/03/11/postgresql-an-zhuang-ji-wen-ti-jie-jue/"/>
      <url>2021/03/11/postgresql-an-zhuang-ji-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<p>title: postgreSQL安装及问题解决<br>date: 2021-03-11 11:25:00<br>author: sheldon<br>img:<br>top: true<br>cover: true<br>coverImg:<br>password:<br>toc: false<br>mathjax: false<br>summary: postgreSQL安装及问题解决<br>categories: postgreSQL数据库<br>tags:</p><ul><li>postgreSQL数据库</li></ul><h1 id="postgreSQL安装"><a href="#postgreSQL安装" class="headerlink" title="postgreSQL安装"></a>postgreSQL安装</h1><p>官网下载地址：</p><p>[<a href="https://www.postgresql.org/]">https://www.postgresql.org/]</a>: </p><p>tip1：</p><p><img src="/postgre1.jpg"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/03/11/jin-cheng-de-miao-shu-yu-kong-zhi/"/>
      <url>2021/03/11/jin-cheng-de-miao-shu-yu-kong-zhi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统绪论</title>
      <link href="2021/03/01/cao-zuo-xi-tong-xu-lun/"/>
      <url>2021/03/01/cao-zuo-xi-tong-xu-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统绪论"><a href="#操作系统绪论" class="headerlink" title="操作系统绪论"></a>操作系统绪论</h1><p>操作系统定义： 操作系统是一组能有效地<strong>组织（控制）和管理</strong>计算机硬件和软件资源，合理对各类作业进行<strong>调度</strong>，已经<strong>方便用户使用</strong>的<strong>程序的集合</strong></p><h2 id="1-1-操作系统的目标和作用"><a href="#1-1-操作系统的目标和作用" class="headerlink" title="1.1 操作系统的目标和作用"></a>1.1 操作系统的目标和作用</h2><h3 id="1-1-1-操作系统的目标"><a href="#1-1-1-操作系统的目标" class="headerlink" title="1.1.1 操作系统的目标"></a>1.1.1 操作系统的目标</h3><ol><li>方便性</li><li>有效性</li><li>可扩充性</li><li>开放性</li></ol><h3 id="1-1-2-操作系统的作用"><a href="#1-1-2-操作系统的作用" class="headerlink" title="1.1.2 操作系统的作用"></a>1.1.2 操作系统的作用</h3><ol><li>OS作为用户与计算机硬件系统之间的接口</li><li>OS作为计算机系统资源的管理者</li><li>OS实现了对计算机资源的抽象（隐藏、扩充）</li></ol><h3 id="1-1-3-推动操作系统发展的主要动力"><a href="#1-1-3-推动操作系统发展的主要动力" class="headerlink" title="1.1.3 推动操作系统发展的主要动力"></a>1.1.3 推动操作系统发展的主要动力</h3><ol><li>不断提高计算机资源利用率</li><li>方便用户</li><li>器件的不断更新迭代</li><li>计算机体系结构的不断发展</li><li>不断提出新的应用需求</li></ol><h2 id="1-2-操作系统的发展过程"><a href="#1-2-操作系统的发展过程" class="headerlink" title="1.2 操作系统的发展过程"></a>1.2 操作系统的发展过程</h2><h3 id="1-2-1-未配置操作系统的计算机系统"><a href="#1-2-1-未配置操作系统的计算机系统" class="headerlink" title="1.2.1  未配置操作系统的计算机系统"></a>1.2.1  未配置操作系统的计算机系统</h3><ol><li>人工操作方式</li><li>脱机输入/输出（Off-Line I/O)方式</li></ol><h3 id="1-2-2-单道批处理系统"><a href="#1-2-2-单道批处理系统" class="headerlink" title="1.2.2 单道批处理系统"></a>1.2.2 单道批处理系统</h3><ol><li>单道批处理系统的处理过程</li><li>单道批处理系统的缺点</li></ol><h3 id="1-2-3-多道批处理系统"><a href="#1-2-3-多道批处理系统" class="headerlink" title="1.2.3 多道批处理系统"></a>1.2.3 多道批处理系统</h3><ol><li><p>多道程序设计的基本概念</p></li><li><p>多道批处理系统的优缺点</p><p>(1) 资源利用率高</p><p>(2) 系统吞吐量大</p><p>(3)平均周转时间长</p><p>(4) 无交互能力</p></li><li><p>多道批处理系统需要解决的问题</p><p>(1)处理机征用问题</p><p>(2)内存分配和保护问题</p><p>(3)I/O设备分配问题</p><p>(4)文件组织和管理问题</p><p>(5)作业管理问题</p><p>(6)用户与系统的接口问题</p></li></ol><h3 id="1-2-4-分时系统"><a href="#1-2-4-分时系统" class="headerlink" title="1.2.4 分时系统"></a>1.2.4 分时系统</h3><ol><li>分时系统的引入</li></ol><p>​     推动多道批系统形成和发展的主要动力是提高资源利用率和系统吞吐量；推动分时系统形成和发展的主要动力是满足用户对人机交互的需求；</p><p>   用户需求具体表现在：（1）人—机交互；（2）共享主机</p><ol start="2"><li><p>分时系统实现的关键问题</p><p>1）及时接收</p><p>2）及时处理：</p><p>  (1)作业直接进入内存 </p><p>  (2)采用轮转运行方式（引入时间片概念）</p></li><li><p>分时系统的特征</p></li></ol><p>​        (1)多路性</p><p>​        (2)独立性</p><p>​        (3)及时性</p><p>​        (4)交互性</p><h3 id="1-2-5-实时系统"><a href="#1-2-5-实时系统" class="headerlink" title="1.2.5 实时系统"></a>1.2.5 实时系统</h3><p>实时系统是指系统能及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行。</p><ol><li><p>实时系统的类型</p><p>(1)工业控制系统</p><p>(2)信息查询系统</p><p>(3)多媒体系统</p><p>(4)嵌入式系统</p></li><li><p>实时任务的类型</p><p>(1)周期性实时任务和非周期性实时任务（有一个截止时间：开始截止时间和完成截止时间）</p><p>(2)硬实时任务和软实时任务</p></li><li><p>实时系统与分时系统的比较</p><p>多路性：相同<br>独立性：相同<br>及时性：实时系统要求更高<br>交互性：分时系统交互性更强<br>可靠性：实时系统要求更高</p></li></ol><h3 id="1-2-6-微机操作系统的发展"><a href="#1-2-6-微机操作系统的发展" class="headerlink" title="1.2.6 微机操作系统的发展"></a>1.2.6 微机操作系统的发展</h3><ol><li>单用户单任务操作系统<br> CP/M<br>MS-DOS</li><li>单用户多任务操作系统<br>Windows系列 （不会Server版）</li><li>多用户多任务操作系统<br>Unix<br>Solaris<br>Linux</li></ol><h2 id="1-3-操作系统的基本特性：并发，共享，虚拟，异步"><a href="#1-3-操作系统的基本特性：并发，共享，虚拟，异步" class="headerlink" title="1.3 操作系统的基本特性：并发，共享，虚拟，异步"></a>1.3 操作系统的基本特性：并发，共享，虚拟，异步</h2><h3 id="1-3-1-并发"><a href="#1-3-1-并发" class="headerlink" title="1.3.1 并发"></a>1.3.1 并发</h3><ol><li>并行与并发<br>并行是指两或多个事件在同一时刻发生。<br>并发是两或多个事件在同一时间间隔内发生。</li><li>任务共行VS任务并发</li></ol><ul><li>从宏观上看，任务共行是指系统中有多个任务同时运行</li><li>从微观上看，任务共行是指单处理机系统中的任务并发（Task Concurrency：即多个任务在单个处理机上交替运行）或多处理机系统中的任务并行（Task Parallelism：即多个任务在多个处理机上同时运行）。</li></ul><ol start="3"><li>进程：系统中能独立运行并作为资源分配的基本单位。引入线程后，独立运行的单位变为线程。</li></ol><h3 id="1-3-2-共享（同时段同对象）"><a href="#1-3-2-共享（同时段同对象）" class="headerlink" title="1.3.2 共享（同时段同对象）"></a>1.3.2 共享（同时段同对象）</h3><p>资源共享（资源复用）：系统中资源可供<strong>内存</strong>中多个并发执行的进程共同使用</p><ol><li><p>互斥共享：一段时间只允许一个进程访问该资源</p></li><li><p>同时访问：微观上仍是互斥的</p></li><li><p>共享以进程的并发为条件， 有效共享是并发发挥价值的基础。</p><p>并发和共享是操作系统的两个最基本的特征，它们又是互为存在的条件</p></li></ol><h3 id="1-3-3-虚拟"><a href="#1-3-3-虚拟" class="headerlink" title="1.3.3 虚拟"></a>1.3.3 虚拟</h3><ol><li><p>时分复用：虚拟处理机技术， 虚拟设备技术</p></li><li><p>空分复用：虚拟存储</p></li></ol><p>通过某种技术把一个物理实体变为若干个逻辑上的对应物。若n是某一物理设备所对应的虚拟的逻辑设备数，则虚拟设备的速度必然是物理设备速度的1/n。</p><h3 id="1-3-4-异步"><a href="#1-3-4-异步" class="headerlink" title="1.3.4 异步"></a>1.3.4 异步</h3><p> 异步：</p><ol><li><p>停停走走</p></li><li><p>运行进度不可预知。</p><p>异步的正确性：虚拟的顺序性<br>异步的影响：难以重现错误、不确定性</p></li></ol><h2 id="1-4-操作系统的主要功能"><a href="#1-4-操作系统的主要功能" class="headerlink" title="1.4 操作系统的主要功能"></a>1.4 操作系统的主要功能</h2><p>操作系统的主要任务：<br>为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。</p><p>操作系统应具有五方面的功能：<br>1、处理机管理（CPU）<br>2、存储器管理<br>3、设备管理<br>4、文件管理<br>5、方便用户使用的用户接口。 </p><h2 id="1-5-OS结构设计"><a href="#1-5-OS结构设计" class="headerlink" title="*1.5 OS结构设计"></a>*1.5 OS结构设计</h2><h3 id="1-5-1-无结构"><a href="#1-5-1-无结构" class="headerlink" title="1.5.1 无结构"></a>1.5.1 无结构</h3><p>一组过程集，各过程可相互调用，也叫整体系统结构。<br>缺点：逻辑复杂，维护困难.</p><h3 id="1-5-2-模块式"><a href="#1-5-2-模块式" class="headerlink" title="1.5.2 模块式"></a>1.5.2 模块式</h3><ol><li>通过分解来控制大型软件复杂度。<br>如：进程模块、内存模块…，各模块内进一步划分子模块。</li><li>优点：<br>提高了OS设计的可维护性<br>增强的OS的可适应性<br>加速了OS的开发过程：并行开发模块</li><li>缺点：<br>接口不易确定<br>模块依赖关系可能复杂（对于大型软件而言）</li></ol><h3 id="1-5-3-层次式"><a href="#1-5-3-层次式" class="headerlink" title="1.5.3 层次式"></a>1.5.3 层次式</h3><ol><li>有序分层的基本概念<br>可简化设计的复杂度<br>下层为上层提供服务</li><li>层次的设置应考虑的因素<br>程序嵌套：各模块间嵌套关系复杂<br>运行频率：随层次的增高，相应软件的运行速度就随之下降<br>公用模块：低层<br>用户接口：高层</li></ol><p>![](E:\86182\Pictures\Camera Roll\图片1.png)</p><h3 id="1-5-4-微内核"><a href="#1-5-4-微内核" class="headerlink" title="1.5.4 微内核"></a>1.5.4 微内核</h3><p>1.提高了系统的灵活性和可扩充性<br>2.提高了软件的可靠性<br>3.适合于分布式系统</p><p>![](E:\86182\Pictures\Camera Roll\图片2.png)</p><ol><li><p>面向对象的程序设计技术：<br>所谓对象，是指在现实世界中具有相同属性、服从相同规则的一系列事物的抽象，而把其中的具体事物称为对象的实例。<br>OS中的各类实体如进程、线程、消息、存储器等，都使用了对象这一概念，便有进程对象线程对象、 存储器对象等<br>优点：<br>可扩展性 ：隐蔽和封装<br>继承性：代码复用<br>提升程序正确性和可维护性</p></li><li><p>微内核技术<br>引入：提高系统的正确性、灵活性、易维护性和可扩充性；<br>四个特征：<br>1.足够小的内核<br>2.采用C/S模式<br>3.应用“机制与策略分离”原则<br>4.采用面向对象技术</p></li><li><p>微内核基本功能：进程管理、低级存储管理、中断和陷入处理</p></li><li><p>优点：<br>1.提高了可扩展性<br>2.增强了可靠性<br>3.可移植性强<br>4.提供了对分布式系统的支持<br>5.融入了面向对象技术</p></li><li><p>问题：<br>性能代价</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/18/hello-world/"/>
      <url>2021/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
